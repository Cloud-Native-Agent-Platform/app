name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

env:
  GO_VERSION: "1.21"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.version }}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since ${PREV_TAG}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### Features" >> $GITHUB_OUTPUT
            git log ${PREV_TAG}..${{ steps.version.outputs.version }} --pretty=format:"- %s (%h)" --grep="^feat" >> $GITHUB_OUTPUT || true
            echo "" >> $GITHUB_OUTPUT
            echo "### Bug Fixes" >> $GITHUB_OUTPUT
            git log ${PREV_TAG}..${{ steps.version.outputs.version }} --pretty=format:"- %s (%h)" --grep="^fix" >> $GITHUB_OUTPUT || true
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

  # Build binaries for multiple platforms
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    needs: create-release
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: darwin
            arch: amd64
            runner: macos-latest
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: windows
            arch: amd64
            runner: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get build info
        id: build_info
        shell: bash
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Build binary
        shell: bash
        run: |
          BINARY_NAME="opencode-bot-${{ needs.create-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          LDFLAGS="-w -s"
          LDFLAGS="${LDFLAGS} -X main.Version=${{ steps.build_info.outputs.version }}"
          LDFLAGS="${LDFLAGS} -X main.Commit=${{ steps.build_info.outputs.commit }}"
          LDFLAGS="${LDFLAGS} -X main.BuildTime=${{ steps.build_info.outputs.build_time }}"

          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
            -ldflags="${LDFLAGS}" \
            -trimpath \
            -o "${BINARY_NAME}" \
            ./cmd/opencode-bot

          echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV

      - name: Generate checksum
        shell: bash
        run: |
          if command -v shasum &> /dev/null; then
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.BINARY_NAME }}.sha256
          asset_name: ${{ env.BINARY_NAME }}.sha256
          asset_content_type: text/plain

  # Build and push Docker image
  docker:
    name: Build Docker Image
    needs: [create-release, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get build info
        id: build_info
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.build_info.outputs.version }}
            COMMIT=${{ steps.build_info.outputs.commit }}
            BUILD_TIME=${{ steps.build_info.outputs.build_time }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notify on completion
  notify:
    name: Notify Release
    needs: [create-release, build, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.docker.result }}" = "success" ]; then
            echo "✅ Release ${{ needs.create-release.outputs.version }} completed successfully"
          else
            echo "❌ Release ${{ needs.create-release.outputs.version }} failed"
            exit 1
          fi
